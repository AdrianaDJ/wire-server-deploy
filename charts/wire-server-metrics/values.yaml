prometheus-operator:
  # Operator specifics
  prometheusOperator:
    # Don't try to create custom resource types; we prefer to do it manually
    # Otherwise we run into race conditions when installing helm charts
    createCustomResource: false

  # Prometheus
  prometheus:
    additionalServiceMonitors:
      - name: wire-services
        # We copy these labels from the pod onto the collected metrics from that pod
        targetLabels:
          - wireService
        endpoints:
          - path: '/i/metrics'
            port: http
            interval: 3m
            metricRelabelings:
              # Rename 'service' to 'role' to allow sharing of grafana dashboards
              # between k8s and AWS services.
              - sourceLabels: [service]
                targetLabel: role
        namespaceSelector:
          # The namespaces which we can monitor are still limited by the
          # `prometheus.rbac.roleNamespaces` rules
          any: true
        selector:
          matchExpressions:
            # select any pod with a 'wireService' label
            - key: wireService
              operator: Exists
    # Example of AWS persistent storage for prometheus
    # prometheusSpec:
    #   storageSpec:
    #     volumeClaimTemplate:
    #       spec:
    #         storageClassName: "aws-ebs-retained"
    #         accessModes: ["ReadWriteOnce"]
    #         resources:
    #           requests:
    #             storage: 10Gi

  # Example of AWS persistent storage for the alertmanager
  # alertmanager:
  #   alertmanagerSpec:
  #     storage:
  #       volumeClaimTemplate:
  #         spec:
  #           storageClassName: "aws-ebs-retained"
  #           accessModes: ["ReadWriteOnce"]
  #           resources:
  #             requests:
  #               storage: 10Gi

  #
  # grafana:
  #   adminPassword: "admin"
  #   Option 1. (no persistence, beware of data loss!)
  #   Option 2.
  # Example of AWS persistent storage for the alertmanager
  #   persistence:
  #     storageClassName: "aws-ebs-retained"
  #     enabled: true
  #     accessModes: ["ReadWriteOnce"]
  #     size: 10Gi
  #   # This can be useful if you have no persistence
  #   extraEmptyDirMounts:
  #     - /var/lib/grafana/dashboards
  #   dashboardProviders:
  #     dashboardproviders.yaml:
  #       apiVersion: 1
  #       providers:
  #         - name: 'default'
  #           orgId: 1
  #           folder: ''
  #           type: file
  #           disableDeletion: false
  #           editable: true
  #           options:
  #             # NOTE: Make sure this is writeable
  #             # path: /var/lib/grafana/dashboards/default # some-other-path

    # TODO: Chart importing is broken for the time being; should be fixed in
    # a release soon.
    # NOTE: This should actually be fixed now but requires the latest helm
    #       which has not been tested yet
    # REF: https://github.com/helm/charts/issues/12352
    #      https://github.com/helm/charts/pull/12512
    # dashboards:
    #   default:
    #     # grafana can only access files from within its own chart directory
    #     # which we don't have access to here; we can either dump the json
    #     # directly into the values file, or load from a url

    #     brig:
    #       url: https://raw.githubusercontent.com/wireapp/wire-server-deploy/cp/prometheus-operator/charts/wire-server-metrics/dashboards/brig.json
    #     cannon:
    #       url: https://raw.githubusercontent.com/wireapp/wire-server-deploy/cp/prometheus-operator/charts/wire-server-metrics/dashboards/cannon.json
    #     galley:
    #       url: https://raw.githubusercontent.com/wireapp/wire-server-deploy/cp/prometheus-operator/charts/wire-server-metrics/dashboards/galley.json
    #     gundeck:
    #       url: https://raw.githubusercontent.com/wireapp/wire-server-deploy/cp/prometheus-operator/charts/wire-server-metrics/dashboards/gundeck.json

  coreDns:
    enabled: false
  kubeDns:
    enabled: true

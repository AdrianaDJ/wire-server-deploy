# travis script inspired from https://github.com/LiliC/travis-minikube/tree/minikube-30-kube-1.12

sudo: required

# We need the systemd for the kubeadm and it's default from 16.04+
dist: xenial
# This moves Kubernetes specific config files.
env:
  - CHANGE_MINIKUBE_NONE_USER=true

before_script:
  # Make root mounted as rshared to fix kube-dns issues.
  - sudo mount --make-rshared /
  # Download kubectl, which is a requirement for using minikube.
  - curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/v1.12.4/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
  # Download minikube.
  - curl -Lo minikube https://storage.googleapis.com/minikube/releases/v0.31.0/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
  - sudo minikube start --vm-driver=none --bootstrapper=kubeadm --kubernetes-version=v1.12.4
  # download helm
  - curl https://raw.githubusercontent.com/kubernetes/helm/master/scripts/get > get_helm.sh
  - chmod +x get_helm.sh
  - ./get_helm.sh -v v2.12.0
  # Fix the kubectl context, as it's often stale.
  - minikube update-context
  # install tiller, init repos
  - helm init
  - helm repo add incubator https://kubernetes-charts-incubator.storage.googleapis.com
  - helm repo add cos https://centerforopenscience.github.io/helm-charts/
  - helm repo remove local || true
  # install socat (needed for helm install ...)
  - sudo apt-get install -y socat
  # install yq to update yaml
  - curl -sL https://github.com/mikefarah/yq/releases/download/2.2.0/yq_linux_amd64 -o yq && chmod +x yq && sudo mv yq /usr/bin/yq
  # Wait for Kubernetes to be up and ready.
  - JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'; until kubectl get nodes -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do sleep 1; done

script:
  - kubectl cluster-info
  # Verify kube-addon-manager.
  # kube-addon-manager is responsible for managing other kubernetes components, such as kube-dns, dashboard, storage-provisioner..
  - JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'; until kubectl -n kube-system get pods -lcomponent=kube-addon-manager -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do sleep 5;echo "waiting for kube-addon-manager to be available"; kubectl get pods --all-namespaces; done
  # Wait for kube-dns to be ready.
  - JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'; until kubectl -n kube-system get pods -lk8s-app=kube-dns -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do sleep 1;echo "waiting for kube-dns to be available"; kubectl get pods --all-namespaces; done
  - kubectl describe nodes
  # Create example deployment on Kubernetes.
  - ./bin/update.sh databases-ephemeral
  - ./bin/update.sh fake-aws
  - ./bin/update.sh wire-server
  - helm upgrade --install --namespace demo demo-databases-ephemeral charts/databases-ephemeral --wait -f values/databases-ephemeral/travis-ci-values.yaml --timeout 200
  - kubectl describe nodes
  - helm upgrade --install --namespace demo demo-fake-aws charts/fake-aws --wait --timeout 100 -f values/fake-aws/travis-ci-values.yaml
  - kubectl describe nodes
  - helm upgrade --install --namespace demo demo-smtp charts/demo-smtp --wait --timeout 50
  - kubectl describe nodes
  - kubectl -n demo get all
    
  # configure wire-server
  - cp values/wire-server/demo-values.example.yaml values/wire-server/demo-values.yaml
  - cp values/wire-server/demo-secrets.example.yaml values/wire-server/demo-secrets.yaml
  - yq w -i values/wire-server/demo-secrets.yaml brig.secrets.turn.secret $(openssl rand -base64 64 | env LC_CTYPE=C tr -dc a-zA-Z0-9 | head -c 42)
    # docker, for zauth: TODO: simplify
  - sudo apt install -y apt-transport-https
  - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - && sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" && sudo apt-get update && sudo apt-get install -y docker-ce
  - sudo docker run --rm quay.io/wire/alpine-intermediate /dist/zauth -m gen-keypair -i 1 > keys.txt
  - yq w -i values/wire-server/demo-secrets.yaml brig.secrets.zAuth.publicKeys $(cat keys.txt | sed -n 's/public: \(.*\)/\1/p')
  - yq w -i values/wire-server/demo-secrets.yaml brig.secrets.zAuth.privateKeys $(cat keys.txt | sed -n 's/secret: \(.*\)/\1/p')
  - yq w -i values/wire-server/demo-secrets.yaml nginz.secrets.zAuth.publicKeys $(cat keys.txt | sed -n 's/public: \(.*\)/\1/p')
  - helm upgrade --install --namespace demo demo-wire-server charts/wire-server -f values/wire-server/demo-values.yaml -f values/wire-server/demo-secrets.yaml --wait
  - kubectl -n demo get all
